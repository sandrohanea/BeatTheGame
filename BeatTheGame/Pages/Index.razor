@page "/"
@inject IGameSessionService gameSessionService;
@inject IPlayerService playerService;
@inject NavigationManager navigationManager;
<div class="main-info">
    <h1>Can you beat the game?!</h1>
    <div class="game-description">
        <p>A simple game solitaire-like where you're playing against the game even on your own or with your team. (But it's better with the team)</p>
    </div>
    <div class="error-message">
        <p>@Error</p>
    </div>
    <BFUTextField Label="Name" @bind-Value="@Name" />
    <BFUStack ClassName="main-info" Horizontal="true" Wrap="true" Tokens=@(new BFUStackTokens() { ChildrenGap = new[] { 40.0 } })>
        <BFUStack Tokens=@(new BFUStackTokens() { ChildrenGap = new[] { 10.0 } })>
            <div class="learn-how-to-play">
                <BFUDefaultButton OnClick="LearnHowToPlayAsync" Text="Learn how to play" />
            </div>

            <BFUTextField Label="Code" @bind-Value="@Code" />

            <BFUPrimaryButton Text="Join Game" OnClick="JoinGameAsync" />
        </BFUStack>

        <BFUStack Tokens=@(new BFUStackTokens() { ChildrenGap = new[] { 10.0 } })>

            <BFUChoiceGroup Label="Number of Players" ItemsSource="this.options" @bind-Value="this.SelectedOption" ItemAlignment="FlexDirection.Column" />
            <BFUToggle Label="Show advanced settings" @bind-Checked="ShowAdvancedSettings" />
            @if (ShowAdvancedSettings)
            {

                <BFUTextField @bind-Value="CardsInHand " Label="Cards In Hands" />

                <BFUTextField @bind-Value="CardsInMainDeck" Label="Cards in Main Deck" />

                <BFUCheckbox @bind-Checked="AllowRedCards" Label="Allow Red Cards" />

                <BFUTextField @bind-Value="RedCardsFrequency" Label="Red Cards Frequency" />

                <BFUTextField @bind-Value="CardsPerTurn" Label="Cards Per Turn" />

                <BFUTextField @bind-Value="NumberOfDecks" Label="Number Of Decks" />
            }

            <BFUDefaultButton Text="Create Game" OnClick="CreateGameAsync" />
        </BFUStack>

    </BFUStack>
</div>

@code
{
    private const string singlePlayerOption = "Single player";
    private const string twoPlayersOption = "Two Players";
    private const string threeToFourPlayersOption = "Three to Four Players";
    private const string moreThanFourPlayersOption = "More than Four Players";
    private string selectedOption = threeToFourPlayersOption;
    private List<string> options = new List<string>() { singlePlayerOption, twoPlayersOption, threeToFourPlayersOption, moreThanFourPlayersOption };

    public string Name { get; set; } = string.Empty;
    public string Code { get; set; } = string.Empty;
    public string Error { get; set; } = string.Empty;
    public bool AllowRedCards { get; set; } = true;
    public string CardsInHand { get; set; } = "6";
    public string CardsInMainDeck { get; set; } = "100";
    public string CardsPerTurn { get; set; } = "2";
    public string NumberOfDecks { get; set; } = "4";
    public string RedCardsFrequency { get; set; } = "9";
    public bool ShowAdvancedSettings { get; set; }

    public string SelectedOption
    {
        get => selectedOption;
        set
        {
            selectedOption = value;
            CardsInHand = selectedOption switch
            {
                singlePlayerOption => "8",
                twoPlayersOption => "7",
                threeToFourPlayersOption => "6",
                moreThanFourPlayersOption => "5",
                _ => "6"
            };
        }
    }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (!isFirstRender)
        {
            return;
        }

        var player = await playerService.GetMyPlayerAsync();

        if (player != null)
        {
            Name = player.Name;
            this.StateHasChanged();
        }

    }

    private async Task JoinGameAsync()
    {
        var player = await GetPlayerAsync();
        if (player == null)
        {
            return;
        }

        if (string.IsNullOrEmpty(Code))
        {
            Error = "The code cannot be empty";
            return;
        }

        var gameSession = gameSessionService.GetGameSession(Code);
        if (gameSession == null)
        {
            Error = "There's no game with this code";
            return;
        }

        navigationManager.NavigateTo($"/Game/{gameSession.Code}");

    }

    private async Task LearnHowToPlayAsync()
    {
        var player = await GetPlayerAsync();
        if (player == null)
        {
            return;
        }

        navigationManager.NavigateTo("/Learn");
    }

    private async Task CreateGameAsync()
    {
        var player = await GetPlayerAsync();
        if (player == null)
        {
            return;
        }

        if (!int.TryParse(CardsInHand, out var cardsInHand) || cardsInHand <= 0)
        {
            Error = "Cards in hand should be a number > 0";
            return;
        }
        if (!int.TryParse(NumberOfDecks, out var numberOfDecks) || numberOfDecks <= 0)
        {
            Error = "Number of decks should be a number > 0";
            return;
        }

        if (!int.TryParse(CardsPerTurn, out var cardsPerTurn) || cardsInHand <= 0 || cardsPerTurn > cardsInHand)
        {
            Error = "Cards per turn should be a number > 0 and lower or equals to cards in hand.";
            return;
        }

        if (!int.TryParse(CardsInMainDeck, out var cardsInMainDeck) || cardsInMainDeck <= cardsInHand)
        {
            Error = "Cards in main deck should be a number > cardsInHand";
            return;
        }

        if (!int.TryParse(RedCardsFrequency, out var redCardsFrequency) || redCardsFrequency <= cardsInHand)
        {
            Error = "Red cards frequency should be a number > cardsInHand";
            return;
        }

        var gameSession = await gameSessionService.CreateGameSessionAsync(player, new GameSessionConfiguration(AllowRedCards, cardsInHand, cardsPerTurn, cardsInMainDeck, numberOfDecks, redCardsFrequency));
        navigationManager.NavigateTo($"/Game/{gameSession.Code}");
    }

    private async Task<Player?> GetPlayerAsync()
    {
        if (string.IsNullOrEmpty(Name))
        {
            Error = "The name cannot be empty";
            return null;
        }

        return await playerService.GetOrUpdatePlayerAsync(Name);
    }
}
